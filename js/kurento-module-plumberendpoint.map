{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../lib/browser.js","../lib/PlumberEndpoint.js"],"names":["require","noop","error","result","console","trace","PlumberEndpoint","super_","call","this","checkPlumberEndpoint","key","value","ChecktypeError","inherits","kurentoClient","disguise","checkType","Transaction","TransactionsManager","Endpoint","register","abstracts","prototype","getAddress","callback","transaction","arguments","Array","shift","apply","undefined","length","bind","_invoke","getPort","link","address","port","required","params","constructorParams","mediaPipeline","type","events","module","exports","check"],"mappings":"AAAA;AE+BA,QAASC,MAAKC,EAAOC,GAGnB,MAFID,IAAOE,QAAQC,MAAMH,GAElBC,EAiBT,QAASG,mBACPA,gBAAgBC,OAAOC,KAAKC,MA0I9B,QAASC,sBAAqBC,EAAKC,GAEjC,KAAKA,YAAiBN,kBACpB,KAAMO,gBAAeF,EAAKL,gBAAiBM,GAjL/C,GAAIE,UAAWd,QAAQ,YAEnBe,cAAgBf,QAAQ,kBAExBgB,SAAWD,cAAcC,SAEzBC,UAAiBF,cAAcE,UAC/BJ,eAAiBI,UAAUJ,eAG3BK,YAAcH,cAAcI,oBAAoBD,YAEhDE,SAAWL,cAAcM,SAASC,UAAUF,QA0BhDN,UAASR,gBAAiBc,UAiB1Bd,gBAAgBiB,UAAUC,WAAa,SAASC,GAC9C,GAAIC,GAAeC,UAAU,YAAcT,aACzBU,MAAML,UAAUM,MAAMC,MAAMH,eAC5BI,EAMlB,OAJIJ,WAAUK,SAAQP,MAAWM,IAEjCN,GAAYA,GAAYxB,MAAMgC,KAAKxB,MAE5BO,SAASP,KAAKyB,QAAQR,EAAa,aAAcD,GAAWhB,OAiBrEH,gBAAgBiB,UAAUY,QAAU,SAASV,GAC3C,GAAIC,GAAeC,UAAU,YAAcT,aACzBU,MAAML,UAAUM,MAAMC,MAAMH,eAC5BI,EAMlB,OAJIJ,WAAUK,SAAQP,MAAWM,IAEjCN,GAAYA,GAAYxB,MAAMgC,KAAKxB,MAE5BO,SAASP,KAAKyB,QAAQR,EAAa,UAAWD,GAAWhB,OA+BlEH,gBAAgBiB,UAAUa,KAAO,SAASC,EAASC,EAAMb,GACvD,GAAIC,GAAeC,UAAU,YAAcT,aACzBU,MAAML,UAAUM,MAAMC,MAAMH,eAC5BI,EAElBd,WAAU,SAAU,UAAWoB,GAAUE,UAAU,IACnDtB,UAAU,MAAO,OAAQqB,GAAOC,UAAU,GAE1C,IAAIC,IACFH,QAASA,EACTC,KAAMA,EAKR,OAFAb,IAAYA,GAAYxB,MAAMgC,KAAKxB,MAE5BO,SAASP,KAAKyB,QAAQR,EAAa,OAAQc,EAAQf,GAAWhB,OAevEH,gBAAgBmC,mBACdC,eACEC,KAAM,gBACNJ,UAAU,IASdjC,gBAAgBsC,OAASxB,SAASwB,OAkBlCC,OAAOC,QAAUxC,gBAEjBA,gBAAgByC,MAAQrC;;ADnMxBV,QAAQ","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Loader for the kurento-module-plumberendpoint package on the browser\n */\n\nrequire('.');\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar disguise = kurentoClient.disguise;\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Endpoint = kurentoClient.register.abstracts.Endpoint;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Builder for the {@link module:plumberendpoint.PlumberEndpoint \n * PlumberEndpoint}\n *\n * @classdesc\n *  Endpoint that allows remote pipelines to negotiate the format of the media \n *  as well as to send data over SCTP. A {@link \n *  module:plumberendpoint.PlumberEndpoint PlumberEndpoint} contains paired sink\n *\n * @extends module:core/abstracts.Endpoint\n *\n * @constructor module:plumberendpoint.PlumberEndpoint\n */\nfunction PlumberEndpoint(){\n  PlumberEndpoint.super_.call(this);\n};\ninherits(PlumberEndpoint, Endpoint);\n\n\n//\n// Public properties\n//\n\n/**\n * IP Address where this endpoint will be waiting for incoming connections of \n * the control channel\n *\n * @alias module:plumberendpoint.PlumberEndpoint#getAddress\n *\n * @param {module:plumberendpoint.PlumberEndpoint~getAddressCallback} [callback]\n *\n * @return {external:Promise}\n */\nPlumberEndpoint.prototype.getAddress = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'getAddress', callback), this)\n};\n/**\n * @callback module:plumberendpoint.PlumberEndpoint~getAddressCallback\n * @param {external:Error} error\n * @param {external:String} result\n */\n\n/**\n * Local port where this end point is attached\n *\n * @alias module:plumberendpoint.PlumberEndpoint#getPort\n *\n * @param {module:plumberendpoint.PlumberEndpoint~getPortCallback} [callback]\n *\n * @return {external:Promise}\n */\nPlumberEndpoint.prototype.getPort = function(callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  if(!arguments.length) callback = undefined;\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'getPort', callback), this)\n};\n/**\n * @callback module:plumberendpoint.PlumberEndpoint~getPortCallback\n * @param {external:Error} error\n * @param {external:Integer} result\n */\n\n\n//\n// Public methods\n//\n\n/**\n * Connect a control channel to the remote {@link \n * module:plumberendpoint.PlumberEndpoint PlumberEndpoint}\n *\n * @alias module:plumberendpoint.PlumberEndpoint.link\n *\n * @param {external:String} address\n *  IP Address where the {@link module:plumberendpoint.PlumberEndpoint \n *  PlumberEndpoint} is waiting for\n *\n * @param {external:Integer} port\n *  Port where the {@link module:plumberendpoint.PlumberEndpoint \n *  PlumberEndpoint} is listening to\n *\n * @param {module:plumberendpoint.PlumberEndpoint~linkCallback} [callback]\n *\n * @return {external:Promise}\n */\nPlumberEndpoint.prototype.link = function(address, port, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  checkType('String', 'address', address, {required: true});\n  checkType('int', 'port', port, {required: true});\n\n  var params = {\n    address: address,\n    port: port\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'link', params, callback), this)\n};\n/**\n * @callback module:plumberendpoint.PlumberEndpoint~linkCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:plumberendpoint.PlumberEndpoint.constructorParams\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the {@link module:core.MediaPipeline MediaPipeline} to which the endpoint \n *  belongs\n */\nPlumberEndpoint.constructorParams = {\n  mediaPipeline: {\n    type: 'MediaPipeline',\n    required: true\n  }\n};\n\n/**\n * @alias module:plumberendpoint.PlumberEndpoint.events\n *\n * @extends module:core/abstracts.Endpoint.events\n */\nPlumberEndpoint.events = Endpoint.events;\n\n\n/**\n * Checker for {@link module:plumberendpoint.PlumberEndpoint}\n *\n * @memberof module:plumberendpoint\n *\n * @param {external:String} key\n * @param {module:plumberendpoint.PlumberEndpoint} value\n */\nfunction checkPlumberEndpoint(key, value)\n{\n  if(!(value instanceof PlumberEndpoint))\n    throw ChecktypeError(key, PlumberEndpoint, value);\n};\n\n\nmodule.exports = PlumberEndpoint;\n\nPlumberEndpoint.check = checkPlumberEndpoint;\n"]}